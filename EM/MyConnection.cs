// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using MySql.Data.MySqlClient;

using System.Collections;
using System.Collections.Generic;


namespace EM {

	public class MyConnection {

		private static MyConnection instance;

		private bool connected = false;

		private MySqlConnection connection;
		private String server;
		private String database;
		private String user;
		private String password;

		/** erro manager **/
		private Action<Exception> onError;

		/** tables and values manager **/
		private List<Table> tables = new List<Table>();



		public void addTable(Table table){
			this.tables.Add (table);
		}

		public void createTables(){
			try{
				foreach(Table t in this.tables){
					String sql = t.getCreateTable();
					//Console.WriteLine(sql);
					this.Connect();
					if (this.connected) {
						//create command and assign the query and connection from the constructor
						MySqlCommand cmd = new MySqlCommand(sql, this.connection);
						
						//Execute command
						cmd.ExecuteNonQuery();
						
						//close connection
						this.CloseConnection();
					}
				}
			}catch(Exception ex){
				if(this.onError != null)
					this.onError(ex);
			}
		}

		/** end table manager **/

		public bool IsConnected(){
			return connected;
		}

		private MyConnection () {

		}

		public void OnError(Action<Exception> onError){
			this.onError = onError;
		}

		public static MyConnection GetInstance(){
			if (instance == null) {
				instance = new MyConnection();
			}
			return instance;
		}

		public MySqlDataReader GetResult(String sql){

			try{
				this.Connect();
				if (this.connected) {
					MySqlCommand cmd = new MySqlCommand (sql, connection);
				
					//Create a data reader and Execute the command
					MySqlDataReader dataReader = cmd.ExecuteReader ();
					//close Connection
					//this.CloseConnection ();
				
					return dataReader;
				}
			}catch(Exception ex){
				if(onError != null)
					onError(ex);
			}

			return null;
		}

		public void Execute(String sql){
			this.Connect();
			if (this.connected) {

				//create command and assign the query and connection from the constructor
				MySqlCommand cmd = new MySqlCommand(sql, connection);
				
				//Execute command
				cmd.ExecuteNonQuery();
				
				//close connection
				this.CloseConnection();
			}
		}

		public void configure(String server, String database, String user, String password){
			this.server = server;
			this.database = database;
			this.user = user;
			this.password = password;
		}

		protected void Connect(){
			string connectionString;
			connectionString = "SERVER=" + this.server + ";" + "DATABASE=" + this.database + ";" + "UID=" + this.user + ";" + "PASSWORD=" + this.password + ";";
			
			connection = new MySqlConnection(connectionString);
			
			try{
				connection.Open();
				connected = true;
			}catch(Exception ex){
				connected = false;
				if(onError != null)
					onError(ex);
			}
		}

		public void CloseConnection(){
			try{
				connection.Close();
				connected = false;
			}catch (MySqlException ex){
				if(onError != null)
					onError(ex);
			}
		}
	}
}

